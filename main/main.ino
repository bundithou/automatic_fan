#include "DHT.h"
#define DHT_PIN 19     // what digital pin we're connected to
#define DHT_TYPE DHT11   // DHT 11
DHT dht(DHT_PIN, DHT_TYPE);

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using software SPI (default case):
#define OLED_MOSI   23
#define OLED_CLK   18
#define OLED_DC    21
#define OLED_CS    1
#define OLED_RESET 4
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define LOGO16_GLCD_HEIGHT 16
#define LOGO16_GLCD_WIDTH  16
// 'womanyellingcat', 128x64px
const unsigned char myBitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0xfe, 0x70, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0xfe, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x3f, 0xfd, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xff, 0xfd, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x01, 0xff, 0xf9, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x01, 0xf8, 0xf9, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x80, 0x00, 0x03, 0xf0, 0xf1, 0xa0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x02, 0x38, 0x00, 0x00, 0x80, 0x00, 0x03, 0xf0, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xe0, 0x00, 0x07, 0x72, 0xf0, 0x00, 0x80, 0x00, 0x07, 0xa1, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x19, 0xc6, 0x00, 0x87, 0x67, 0xf8, 0x00, 0x80, 0x00, 0x03, 0x63, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x7c, 0x70, 0x00, 0x0e, 0x47, 0xfe, 0x00, 0x80, 0x00, 0x02, 0xc2, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xfe, 0x60, 0x88, 0x12, 0x07, 0xfe, 0x00, 0x80, 0x00, 0x06, 0xc6, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xfe, 0x70, 0x40, 0x00, 0x0f, 0xfe, 0x00, 0x80, 0x00, 0x06, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xff, 0xff, 0x20, 0x00, 0x01, 0xfe, 0x00, 0x80, 0x00, 0x06, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xd0, 0x00, 0x00, 0xfe, 0x00, 0x81, 0xc0, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xd8, 0x00, 0x00, 0xe0, 0x00, 0x80, 0x43, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xff, 0xff, 0xe8, 0x00, 0x00, 0xc8, 0x00, 0x80, 0x01, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xff, 0xff, 0xf4, 0x00, 0x32, 0xb8, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0xf4, 0x00, 0x7e, 0xb0, 0x00, 0x82, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0xe2, 0x00, 0x3d, 0x3f, 0x00, 0xff, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0x98, 0x00, 0x3e, 0xff, 0x00, 0xff, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xfb, 0x8f, 0xa0, 0x00, 0x1a, 0xbf, 0x00, 0xff, 0x1f, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x3b, 0xd9, 0xe7, 0xc0, 0x00, 0x1d, 0xfe, 0x00, 0xff, 0x3f, 0x80, 0x0e, 0x00, 0x00, 0x0c, 0x00, 
  0x3f, 0xdb, 0xdf, 0x04, 0x00, 0x1f, 0xf8, 0x00, 0xfe, 0x7f, 0x80, 0x07, 0xd4, 0x60, 0x78, 0x00, 
  0x51, 0x83, 0x27, 0xfc, 0x00, 0x70, 0x30, 0x00, 0xfe, 0x7f, 0x80, 0x03, 0xff, 0xff, 0xf8, 0x00, 
  0x11, 0x0e, 0x1f, 0xfe, 0x00, 0x70, 0x30, 0x00, 0xfc, 0xff, 0x80, 0x03, 0xff, 0xff, 0xf0, 0x00, 
  0x71, 0x1f, 0xff, 0xfe, 0x00, 0x7f, 0xf0, 0x00, 0xfc, 0xff, 0x80, 0x01, 0xff, 0xff, 0xe0, 0x00, 
  0x22, 0x0f, 0xff, 0xfe, 0x00, 0x7f, 0xfc, 0x00, 0xf8, 0xff, 0x80, 0x01, 0xff, 0xff, 0xe0, 0x00, 
  0xa2, 0x0f, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xf8, 0xfc, 0xff, 0x80, 0x03, 0xff, 0xff, 0xc0, 0x00, 
  0xa2, 0x0f, 0xfe, 0x7e, 0x01, 0xff, 0xff, 0xf8, 0xf0, 0x7f, 0x80, 0x03, 0x3e, 0x3f, 0xc0, 0x00, 
  0x8a, 0x0f, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xf0, 0xd0, 0x3f, 0x80, 0x07, 0xfe, 0xff, 0xc0, 0x00, 
  0xb9, 0xaf, 0xff, 0xf6, 0x0f, 0xff, 0xfb, 0x01, 0xb0, 0x1f, 0x80, 0x07, 0xff, 0xff, 0xc0, 0x00, 
  0x99, 0xaf, 0xff, 0x24, 0x1f, 0xff, 0xe3, 0x01, 0xa0, 0x07, 0x80, 0x07, 0xff, 0xff, 0xc0, 0x00, 
  0x79, 0xa7, 0xfc, 0x06, 0xff, 0xff, 0xf8, 0x81, 0xa0, 0x02, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 
  0x79, 0x97, 0xf8, 0x04, 0xff, 0xff, 0xfe, 0xc1, 0xe0, 0x00, 0x00, 0x07, 0xdf, 0xff, 0xc0, 0x00, 
  0x70, 0x8b, 0xfb, 0xcd, 0xff, 0xff, 0xfc, 0x01, 0xe4, 0x01, 0x00, 0x07, 0x83, 0xff, 0xc0, 0x00, 
  0xf8, 0x85, 0xfb, 0xfd, 0xff, 0xff, 0xf0, 0x81, 0xe0, 0x01, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 
  0xf8, 0x02, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xa0, 0x01, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 
  0xf3, 0x08, 0x5f, 0xbf, 0xfe, 0x7f, 0x40, 0x00, 0x80, 0x01, 0x00, 0x03, 0xc0, 0xff, 0xc0, 0x00, 
  0xff, 0xf8, 0x2e, 0xdf, 0xf8, 0x3c, 0x00, 0x00, 0x90, 0x01, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 
  0xff, 0xf8, 0x0c, 0xdf, 0xf0, 0x1c, 0x00, 0x00, 0xe2, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc0, 
  0xf3, 0xf8, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x77, 0xff, 0xff, 0xff, 0xf8, 
  0x80, 0x70, 0xc3, 0xff, 0xe0, 0x00, 0x00, 0x00, 0xa6, 0x00, 0x01, 0xe0, 0x7f, 0xff, 0xfd, 0xfc, 
  0x00, 0x10, 0xc0, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x82, 0x00, 0x03, 0xf0, 0x1f, 0xff, 0x4f, 0xfd, 
  0x00, 0x0b, 0xc1, 0xff, 0x80, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x70, 0x00, 0x7f, 0xfc, 0x83, 
  0x00, 0x04, 0xc7, 0xff, 0x80, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x01, 0x28, 0xf8, 0x8f, 
  0x00, 0x04, 0x8f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x08, 0x00, 0x00, 0x80, 0xf8, 0xcf, 
  0x00, 0x02, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x0e, 0x00, 0x00, 0x40, 0x2f, 0xff, 
  0x07, 0x02, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x07, 0xb1, 0x1c, 0x00, 0x2f, 0xff, 
  0x1f, 0xc2, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x1f, 0xff, 0x82, 0x03, 0xff, 
  0x7f, 0xc3, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xef, 
  0x7f, 0xe3, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xf7, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x02, 0x80, 0x31, 0x00, 0x00, 0x07, 0xff, 0xc3, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x40, 0x00, 0x1f, 0xff, 0xe3, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0xef, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1b, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x18, 0x01, 0x5f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x37, 0x01, 0xff, 0xfd, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x02, 0x47, 0xff, 0xff, 0xff, 0xff, 
  0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0x40, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0x3f, 0xff, 0xfc, 0x00, 0x00, 0x08, 0x00, 0x00, 0x8f, 0x00, 0x03, 0x01, 0xfb, 0xff, 0xff, 0xff, 
  0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x07, 0x83, 0xff, 0xff, 0xff, 0xff
};
///////////////////////////////////
#define RELAY_SIGNAL_PIN 2
#define SWITCH_PIN 15

///////////////////////////////////
int state = 0;

///////////////////////////////////
#include <ESP32Servo.h>
#define SERVO_PIN 05
Servo sv;  // create servo object to control a servo
int pos = 0;      // position in degrees
int direction = 1;
//////////////////////////////////
#include <IRremoteESP8266.h>
#include <IRrecv.h>
#include <IRutils.h>

#define IR_PIN 22
int max_pos = 100;
int min_pos = 0;

//RC codes
#define ON_0 0x00FF6897
#define ON_1 0x00FF30CF
#define ON_2 0x00FF18E7
#define ON_LEFT 0x00FF22DD
#define ON_RIGHT 0x00FF02FD

IRrecv ir_recv (IR_PIN);
decode_results results;

void setup() {
  Serial.begin(9600);
  // switch
  pinMode(SWITCH_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(SWITCH_PIN), turn_on_off, FALLING);

  // relay
  pinMode(RELAY_SIGNAL_PIN, OUTPUT);
  digitalWrite(RELAY_SIGNAL_PIN, LOW);

  // ir remote
  pinMode(IR_PIN, INPUT);
  ir_recv.enableIRIn (); // Start the receiver
  sv.setPeriodHertz(50);      // Standard 50hz servo

  // OLED
  display.begin(SSD1306_SWITCHCAPVCC,0x3C); //or 0x3C
  show_meme();
  show_project_name();

  // DHT_11
  dht.begin();
}

void loop() { 

  display.clearDisplay();
//  Serial.println(digitalRead(15));
//  Serial.println(state);
  ir_remote();
  print_oled();
  check_fan(state);
  if(state!=0){
   if(state==1)auto_swing();
  }
  
  
}

void turn_on_off() {
  Serial.print("on_off");
  
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();
  
  if(interrupt_time - last_interrupt_time > 200){
    Serial.println("interupt");
      if(state == 0){
        state = 1;
      }else {
        state = 0;
      }
  }
  last_interrupt_time = interrupt_time;
}

void check_fan(int state){
 
  if(state==0){
    digitalWrite(RELAY_SIGNAL_PIN, LOW );
  } else{
    digitalWrite(RELAY_SIGNAL_PIN, HIGH);
  }
}
void print_oled() {
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  float tem = dht.readTemperature();
  float hum = dht.readHumidity();
  if(state == 0) display.println("Fan: Off");
  else display.println("Fan: On");
  display.println("Tem:"+String(tem));
  display.println("Hum:"+String(hum));
  display.display();
  
}

void show_meme(){
  display.clearDisplay(); //for Clearing the display
  display.drawBitmap(0, 0, myBitmap, 128, 64, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
  display.display();
  delay(2000);
  display.clearDisplay();
}

void show_project_name(){
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Automatic Fan");
  display.println("Group G");
  display.display();
  delay(2000);
  display.clearDisplay();
}

void ir_remote(){
  if(ir_recv.decode(&results)){
    serialPrintUint64(results.value, HEX);
    Serial.println("");
    switch(results.value){
      case ON_0:
        Serial.println("Zero");
        state = 0;
        break;
      case ON_1:
        Serial.println("One");
        state = 1;
        break;
      case ON_2:
        Serial.println("Two");
        state = 2;
        break;
      case ON_LEFT:
        Serial.println("left");
        if(state == 2) manual_swing(2);
        direction = 2;
        break;
      case ON_RIGHT:
        Serial.println("right");
        if(state == 2) manual_swing(1);
        direction = 1;
        break;
    }
    ir_recv.resume();
    delay(100);
  }
}

void auto_swing() {
  // put your main code here, to run repeatedly:
    sv.attach(SERVO_PIN);
  for (pos; pos <= 100; pos++) { // sweep from 0 degrees to 180 degrees
    // in steps of 1 degree
//    Serial.println(digitalRead(15));

    display.clearDisplay();
    print_oled();
    if(direction == 2)break;
    ir_remote();
    if(state != 1)break;
    
    sv.write(pos);
    delay(50);             // waits 20ms for the servo to reach the position
  }
  direction = 2;
  for (pos ; pos >= 0; pos--) { // sweep from 0 degrees to 180 degrees
//    Serial.println(digitalRead(15));
    display.clearDisplay();
    print_oled();
    if(direction == 1)break;
    ir_remote();
    if(state != 1)break;
    // in steps of 1 degree
    
    sv.write(pos);
    delay(50);             // waits 20ms for the servo to reach the position
  }
  direction = 1;
  sv.detach();
  delay(500);
}

void manual_swing(int direction) {
  // put your main code here, to run repeatedly:
    sv.attach(SERVO_PIN);
    int p = pos;
    if(direction == 1){
      for (p = pos; p <= pos+10 && p <= max_pos ; p++) { // sweep from 0 degrees to 180 degrees
        // in steps of 1 degree
        sv.write(p);
        delay(10);             // waits 20ms for the servo to reach the position
      }
    }  
    else if (direction == 2){
      for (p = pos; p >= pos-10 && p >= min_pos; p--) { // sweep from 0 degrees to 180 degrees
        // in steps of 1 degree
        sv.write(p);
        delay(10);             // waits 20ms for the servo to reach the position
      }
    } 
    pos = p;
    
    sv.detach();
}
